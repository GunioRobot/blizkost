/*
Copyright (C) 2009, Jonathan Worthington and friends
$Id$

=head1 NAME

src/pmc/p5namespace.pmc - PMC that wraps a Perl 5 namespace

=head1 DESCRIPTION

These are the vtable functions for the P5Namespace class.

=cut

*/

/* Various Perl 5 headers that we need. */
#undef __attribute__
#undef __attribute__noreturn__
#undef __attribute__deprecated__
#define __attribute__(x) /* */
#include <EXTERN.h>
#include <perl.h>

/* Plus need to know about some other PMCs. */
#include "pmc_p5interpreter.h"
#include "pmc_p5invocation.h"
#include "pmc_p5scalar.h"

pmclass P5Namespace group blizkost_group dynpmc {
    ATTR PMC    *p5i;
    ATTR PMC    *marshall_cache;
    ATTR STRING *ns_name;

/*

=item C<void init()>

Set up P5Namespace PMC.

=cut

*/

    VTABLE void init_pmc(PMC *p5i) {
        /* Set up the underlying structure. */
        PMC_data(SELF) = mem_allocate_zeroed_typed(Parrot_P5Namespace_attributes);
        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);
        SETATTR_P5Namespace_p5i(interp, SELF, p5i);
        SETATTR_P5Namespace_marshall_cache(interp, SELF, PMCNULL);
    }


/*

=item C<void mark()>

Mark GC-ables.

=cut

*/
    VTABLE void mark() {
        if (PMC_data(SELF)) {
            PMC    *p5i, *cache;
            STRING *name;
            GETATTR_P5Namespace_p5i(interp, SELF, p5i);
            GETATTR_P5Namespace_marshall_cache(interp, SELF, cache);
            GETATTR_P5Namespace_ns_name(interp, SELF, name);
            if (p5i)
                Parrot_gc_mark_PObj_alive(interp, (PObj*)p5i);
            if (cache)
                Parrot_gc_mark_PObj_alive(interp, (PObj*)cache);
            if (name)
                Parrot_gc_mark_PObj_alive(interp, (PObj*)name);
        }
    }


/*

=item C<void destroy()>

Free underlying structure.

=cut

*/
    VTABLE void destroy() {
        if (PMC_data(SELF))
            mem_sys_free(PMC_data(SELF));
    }


/*

=item C<void set_string_native(STRING *name)>

Set the name of the Perl 5 namespace that we map to.

=cut

*/
    VTABLE void set_string_native(STRING *name) {
        SETATTR_P5Namespace_ns_name(interp, SELF, name);
    }

    

/*

=item C<PMC *find_method(STRING *name)>

Hands back a P5Invocation so we can call a method on the package.

=cut

*/
    VTABLE PMC *find_method(STRING *name) {
        PMC *p5i, *result;
        GETATTR_P5Namespace_p5i(interp, SELF, p5i);

        /* Make and return a P5Invocation object. */
        result = pmc_new(interp, pmc_type(interp, CONST_STRING(interp, "P5Invocation")));
        SETATTR_P5Invocation_p5i(interp, result, p5i);
        SETATTR_P5Invocation_invocant_ns(interp, result, SELF);
        SETATTR_P5Invocation_name(interp, result, name);
        return result;
    }


/*

=item C<INTVAL isa(STRING *check)>

Override isa so we can pretend to inherit from NameSpace.

=cut

*/
    VTABLE INTVAL isa(STRING *check) {
        /* Lie about inheriting from NameSpace PMC. */
        if (Parrot_str_equal(interp, check, CONST_STRING(interp, "NameSpace")))
            return 1;
        return SUPER(check);
    }
}
