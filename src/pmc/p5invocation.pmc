/*
Copyright (C) 2009, Jonathan Worthington and friends
$Id$

=head1 NAME

src/pmc/p5invocation.pmc - Perl 5 method invocation helper

=head1 DESCRIPTION

This PMC is used to map the invocation of a Perl 5 method onto the Parrot
invocation model and calling conventions.

=cut

*/

/* Various Perl 5 headers that we need. */
#include <EXTERN.h>
#include <perl.h>

/* Plus need to know about the interpreter and scalar wrapper. */
#include "pmc_p5interpreter.h"
#include "pmc_p5scalar.h"

pmclass P5Invocation group blizkost_group dynpmc {
    ATTR PMC       *p5i;
    ATTR struct sv *invocant;
    ATTR STRING    *name;

/*

=item C<void init()>

Set up P5Invocation PMC.

=cut

*/

    VTABLE void init() {
        /* Set up the underlying structure. */
        PMC_data(SELF) = mem_allocate_zeroed_typed(Parrot_P5Invocation_attributes);
        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);
    }

/*

=item C<void mark()>

Mark GC-ables.

=cut

*/
    VTABLE void mark() {
        if (PMC_data(SELF)) {
            PMC *p5i;
            GETATTR_P5Invocation_p5i(interp, SELF, p5i);
            if (p5i)
                Parrot_gc_mark_PObj_alive(interp, (PObj*)p5i);
        }
    }

/*

=item C<void *invoke(void *next)>

Handles the actual invocation.

XXX TODO: Also pass arguments along.

XXX TODO: Return value handling

=cut

*/
    VTABLE opcode_t *invoke(void *next) {
        STRING          *name;
        char            *c_name;
        struct sv       *invocant;
        int              num_returns, i;
        PMC             *p5i, *results, *ns, *ns_key, *return_helper;
        PerlInterpreter *my_perl;
        
        /* Get the interpreter, SV and the name. */
        GETATTR_P5Invocation_p5i(interp, SELF, p5i);
        GETATTR_P5Interpreter_my_perl(interp, p5i, my_perl);
        GETATTR_P5Invocation_name(interp, SELF, name);
        c_name = Parrot_str_to_cstring(interp, name);
        GETATTR_P5Invocation_invocant(interp, SELF, invocant);

        {
            /* Set up the stack and invoke the method. */
            dSP;
            ENTER;
            SAVETMPS;
            PUSHMARK(SP);
            XPUSHs(invocant);
            /* XXX: Params. */
            PUTBACK;
            num_returns = call_method(c_name, G_ARRAY);
            SPAGAIN;

            /* Build the results PMC array. */
            results = pmc_new(interp, enum_class_ResizablePMCArray);
            for (i = 0; i < num_returns; i++) {
                struct sv *result_sv = POPs;
                PMC *result_pmc = pmc_new(interp, pmc_type(interp, string_from_literal(interp, "P5Scalar")));
                SETATTR_P5Scalar_p5i(interp, result_pmc, SELF);
                SETATTR_P5Scalar_sv(interp, result_pmc, SvREFCNT_inc(result_sv));
                VTABLE_unshift_pmc(interp, results, result_pmc);
            }
            PUTBACK;
            FREETMPS;
            LEAVE;
        }
        mem_sys_free(c_name);

        /* Use the return helper to hand back the result. */
        ns_key = pmc_new(interp, enum_class_ResizableStringArray);
        VTABLE_push_string(interp, ns_key, CONST_STRING(interp, "parrot"));
        VTABLE_push_string(interp, ns_key, CONST_STRING(interp, "Perl5"));
        VTABLE_push_string(interp, ns_key, CONST_STRING(interp, "Compiler"));
        ns = Parrot_get_namespace_keyed(interp, interp->root_namespace, ns_key);
        return_helper = VTABLE_get_pmc_keyed_str(interp, ns, CONST_STRING(interp, "!return_value_helper_arr"));
        return_helper = VTABLE_clone(interp, return_helper);
        VTABLE_setprop(interp, return_helper, CONST_STRING(interp, "$!ret_val"), results);
        return VTABLE_invoke(interp, return_helper, next);
    }
}
